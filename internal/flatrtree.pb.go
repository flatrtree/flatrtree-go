// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.2
// source: flatrtree.proto

package internal

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// `count` is the number of items in the tree.
	//
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	//
	// `refs[:count]` are external references to the items being indexed.
	// The values are generally determined by insertion order, but can be
	// any 64-bit integer.
	//
	// `refs[count:]` are internal references to positions in the `boxes`
	// list, and represent the start position of child bounding boxes for
	// a node. We can retrieve sibling boxes using pairwise references:
	//
	//     boxes[refs[i]:refs[i+1]]
	//
	// The position of a reference in `refs` corresponds to the position
	// of its bounding box in `boxes`. The reference for the bounding box
	// at `boxes[i:i+4]` is `refs[i/4]`.
	//
	// The layout of `refs` might look like this, where the number of
	// levels depends on node size and the number of items:
	// +-----------------------------------------------------------+
	// |      level 3 (leaves)     |    level 2   | level 1 | root |
	// +-----------------------------------------------------------+
	//                             ^
	//                        refs[count]
	//
	Refs []int64 `protobuf:"varint,2,rep,packed,name=refs,proto3" json:"refs,omitempty"`
	//
	// `boxes` is a flat list of 2-D axis-aligned bounding boxes.
	//
	// `boxes[:count*4]` are the external item bounding boxes.
	// `boxes[count*4:]` are the internal node bounding boxes.
	//
	// The layout of `boxes` might look like this, where the number of
	// levels depends on node size and the number of items:
	// +-----------------------------------------------------------+
	// |      level 3 (leaves)     |    level 2   | level 1 | root |
	// +-----------------------------------------------------------+
	//                             ^
	//                       boxes[count*4]
	//
	// Bounding boxes are encoded as min point and max point:
	//
	//          xmin, ymin, xmax, ymax
	//
	// The coordinate values are multiplied by `10^precision` and
	// stored as signed, 64-bit integers in order to take advantage
	// of varint encoding to reduce the size in bytes. This technique
	// is borrowed from the Geobuf protobuf format.
	//
	Boxes []int64 `protobuf:"zigzag64,3,rep,packed,name=boxes,proto3" json:"boxes,omitempty"`
	//
	// `precision` is used to convert 64-bit float coordinates
	// to/from signed integers.
	//
	Precision uint32 `protobuf:"varint,4,opt,name=precision,proto3" json:"precision,omitempty"`
}

func (x *RTree) Reset() {
	*x = RTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flatrtree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RTree) ProtoMessage() {}

func (x *RTree) ProtoReflect() protoreflect.Message {
	mi := &file_flatrtree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RTree.ProtoReflect.Descriptor instead.
func (*RTree) Descriptor() ([]byte, []int) {
	return file_flatrtree_proto_rawDescGZIP(), []int{0}
}

func (x *RTree) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RTree) GetRefs() []int64 {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *RTree) GetBoxes() []int64 {
	if x != nil {
		return x.Boxes
	}
	return nil
}

func (x *RTree) GetPrecision() uint32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

var File_flatrtree_proto protoreflect.FileDescriptor

var file_flatrtree_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x66, 0x6c, 0x61, 0x74, 0x72, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22, 0x65, 0x0a, 0x05, 0x52,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x6f, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x12, 0x52, 0x05, 0x62,
	0x6f, 0x78, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x5a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flatrtree_proto_rawDescOnce sync.Once
	file_flatrtree_proto_rawDescData = file_flatrtree_proto_rawDesc
)

func file_flatrtree_proto_rawDescGZIP() []byte {
	file_flatrtree_proto_rawDescOnce.Do(func() {
		file_flatrtree_proto_rawDescData = protoimpl.X.CompressGZIP(file_flatrtree_proto_rawDescData)
	})
	return file_flatrtree_proto_rawDescData
}

var file_flatrtree_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_flatrtree_proto_goTypes = []interface{}{
	(*RTree)(nil), // 0: internal.RTree
}
var file_flatrtree_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_flatrtree_proto_init() }
func file_flatrtree_proto_init() {
	if File_flatrtree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flatrtree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flatrtree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flatrtree_proto_goTypes,
		DependencyIndexes: file_flatrtree_proto_depIdxs,
		MessageInfos:      file_flatrtree_proto_msgTypes,
	}.Build()
	File_flatrtree_proto = out.File
	file_flatrtree_proto_rawDesc = nil
	file_flatrtree_proto_goTypes = nil
	file_flatrtree_proto_depIdxs = nil
}
